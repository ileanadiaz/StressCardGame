#BlueJ class context
comment0.target=DrawingPanel
comment0.text=\n\ \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\ DrawingPanel.java\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <br>\n\ Simplified\ Java\ drawing\ window\ class\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <br>\n\ to\ accompany\ Building\ Java\ Programs\ textbook\ and\ associated\ materials\ <br>\n\ \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\ \n\ @author\ Marty\ Stepp\ and\ Stuart\ Reges,\ University\ of\ Washington\n\ @version\ 2016/03/07\ (BJP\ 4th\ edition)\n\ \n\ <p>\n\ The\ DrawingPanel\ class\ provides\ a\ simple\ interface\ for\ drawing\ persistent\n\ images\ using\ a\ Graphics\ object.\ \ An\ internal\ BufferedImage\ object\ is\ used\n\ to\ keep\ track\ of\ what\ has\ been\ drawn.\ \ A\ client\ of\ the\ class\ simply\n\ constructs\ a\ DrawingPanel\ of\ a\ particular\ size\ and\ then\ draws\ on\ it\ with\n\ the\ Graphics\ object,\ setting\ the\ background\ color\ if\ they\ so\ choose.\n\ </p>\n\ <p>\n\ The\ intention\ is\ that\ this\ custom\ library\ will\ mostly\ "stay\ out\ of\ the\ way"\n\ so\ that\ the\ client\ mostly\ interacts\ with\ a\ standard\ Java\ java.awt.Graphics\n\ object,\ and\ therefore\ most\ of\ the\ experience\ gained\ while\ using\ this\ library\n\ will\ transfer\ to\ Java\ graphics\ programming\ in\ other\ contexts.\n\ DrawingPanel\ is\ not\ intended\ to\ be\ a\ full\ rich\ graphical\ library\ for\ things\n\ like\ object-oriented\ drawing\ of\ shapes,\ animations,\ creating\ games,\ etc.\n\ </p>\n\ <p>\n\ Example\ usage\:\n\ </p>\n\ <pre>\n\ DrawingPanel\ panel\ \=\ new\ DrawingPanel(600,\ 400);\n\ Graphics\ g\ \=\ panel.getGraphics();\n\ g.setColor(Color.RED);\n\ g.fillRect(17,\ 45,\ 139,\ 241);\n\ ...\n\ </pre>\n\ <p>\n\ To\ ensure\ that\ the\ image\ is\ always\ displayed,\ a\ timer\ calls\ repaint\ at\n\ regular\ intervals.\n\ </p>\n\ <p>\n\ This\ version\ of\ DrawingPanel\ also\ saves\ animated\ GIFs,\ though\ this\ is\ kind\n\ of\ hit-and-miss\ because\ animated\ GIFs\ are\ pretty\ sucky\ (256\ color\ limit,\ large\n\ file\ size,\ etc).\n\ </p>\n\ <p>\n\ History\ and\ recent\ changes\:\n\ </p>\n\ \n\ 2015/09/04\n\ -\ Now\ includes\ methods\ for\ get/setting\ individual\ pixels\ and\ all\ pixels\ on\ the\n\ \ \ drawing\ panel.\ \ This\ helps\ facilitate\ 2D\ array-based\ pixel-processing\n\ \ \ exercises\ and\ problems\ for\ Building\ Java\ Programs,\ 4th\ edition.\n\ -\ Code\ cleanup\ and\ reorganization.\n\ \ \ Now\ better\ alphabetization/formatting\ of\ members\ and\ encapsulation.\n\ \ \ Commenting\ also\ augmented\ throughout\ code.\n\ <p>\n\ \n\ 2015/04/09\n\ -\ Now\ includes\ a\ DebuggingGraphics\ inner\ class\ that\ keeps\ track\ of\ how\ many\n\ \ \ times\ various\ drawing\ methods\ are\ called.\ \ It\ includes\ a\ showCounts\ method\n\ \ \ for\ the\ DrawingPanel\ itself\ that\ allows\ a\ client\ to\ examine\ this.\ \ The\n\ \ \ panel\ will\ record\ basic\ drawing\ methods\ performed\ by\ a\ version\ of\ the\n\ \ \ Graphics\ class\ obtained\ by\ calling\ getDebugging\ Graphics\:\n\ \n\ \ \ Graphics\ g\ \=\ panel.getDebuggingGraphics();\n\ \n\ \ \ Novices\ will\ be\ encouraged\ to\ simply\ print\ it\ at\ the\ end\ of\ main,\ as\ in\:\n\ \n\ \ \ System.out.println(panel.getCounts());\n\ \n\ \ \ All\ additions\ are\ commented\ (search\ for\ "DebuggingGraphics")\n\ <p>\n\ \n\ 2011/10/25\n\ -\ save\ zoomed\ images\ (2011/10/25)\n\ <p>\n\ \n\ 2011/10/21\n\ -\ window\ no\ longer\ moves\ when\ zoom\ changes\n\ -\ grid\ lines\n
comment1.params=
comment1.target=void\ checkAnimationSettings()
comment1.text=\n\ Called\ when\ DrawingPanel\ class\ loads\ up.\n\ Checks\ whether\ the\ user\ wants\ to\ save\ an\ animation\ to\ a\ file.\n
comment10.params=
comment10.target=boolean\ usingDrJava()
comment10.text=\n\ Returns\ whether\ the\ current\ program\ is\ running\ in\ the\ DrJava\ editor.\n\ This\ was\ needed\ in\ the\ past\ because\ DrJava\ messed\ with\ some\ settings.\n
comment11.params=width\ height
comment11.target=DrawingPanel(int,\ int)
comment11.text=\n\ Constructs\ a\ drawing\ panel\ of\ given\ width\ and\ height\ enclosed\ in\ a\ window.\n\ @param\ width\ panel's\ width\ in\ pixels\n\ @param\ height\ panel's\ height\ in\ pixels\n
comment12.params=
comment12.target=void\ run()
comment13.params=
comment13.target=void\ run()
comment14.params=listener
comment14.target=void\ addKeyListener(java.awt.event.KeyListener)
comment14.text=\n\ Adds\ the\ given\ event\ listener\ to\ respond\ to\ key\ events\ on\ this\ panel.\n
comment15.params=listener
comment15.target=void\ addMouseListener(java.awt.event.MouseListener)
comment15.text=\n\ Adds\ the\ given\ event\ listener\ to\ respond\ to\ mouse\ events\ on\ this\ panel.\n
comment16.params=
comment16.target=boolean\ autoEnableAnimationOnSleep()
comment16.text=\n\ Whether\ the\ panel\ should\ automatically\ switch\ to\ animated\ mode\n\ if\ it\ calls\ the\ sleep\ method.\n
comment17.params=frame
comment17.target=void\ center(java.awt.Window)
comment17.text=\n\ Moves\ the\ given\ JFrame\ to\ the\ center\ of\ the\ screen.\n
comment18.params=
comment18.target=void\ checkChooser()
comment18.text=\n\ Constructs\ and\ initializes\ our\ JFileChooser\ field\ if\ necessary.\n
comment19.params=
comment19.target=void\ clear()
comment19.text=\n\ Erases\ all\ drawn\ shapes/lines/colors\ from\ the\ panel.\n
comment2.params=rgb
comment2.target=int\ getRed(int)
comment2.text=\n\ Returns\ the\ red\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\n
comment20.params=
comment20.target=void\ compareToFile()
comment20.text=\n\ Compares\ the\ current\ DrawingPanel\ image\ to\ an\ image\ file\ on\ disk.\n
comment21.params=
comment21.target=void\ compareToURL()
comment21.text=\n\ Compares\ the\ current\ DrawingPanel\ image\ to\ an\ image\ file\ on\ the\ web.\n
comment22.params=
comment22.target=void\ exit()
comment22.text=\n\ Closes\ the\ DrawingPanel\ and\ exits\ the\ program.\n
comment23.params=
comment23.target=java.lang.String\ getCallingClassName()
comment23.text=\n\ Returns\ a\ best\ guess\ about\ the\ name\ of\ the\ class\ that\ constructed\ this\ panel.\n
comment24.params=
comment24.target=java.util.Map\ getCounts()
comment24.text=\n\ Returns\ an\ immutable\ version\ of\ the\ internal\ map\ used\ for\ counting\n\ occurrences\ calls\ on\ various\ drawing\ methods.\ \ Experts\ can\ manipulate\n\ the\ map,\ but\ novices\ will\ be\ encouraged\ to\ simply\ print\ it.\n
comment25.params=
comment25.target=java.awt.Graphics\ getDebuggingGraphics()
comment25.text=\n\ A\ variation\ of\ getGraphics\ that\ returns\ an\ object\ that\ records\n\ a\ count\ for\ various\ drawing\ methods.\n\ See\ also\:\ getCounts.\n
comment26.params=
comment26.target=java.awt.Graphics2D\ getGraphics()
comment26.text=\n\ Obtain\ the\ Graphics\ object\ to\ draw\ on\ the\ panel.\n
comment27.params=
comment27.target=java.awt.image.BufferedImage\ getImage()
comment27.text=\n\ Creates\ the\ buffered\ image\ for\ drawing\ on\ this\ panel.\n
comment28.params=
comment28.target=int\ getHeight()
comment28.text=\n\ Returns\ the\ drawing\ panel's\ height\ in\ pixels.\n
comment29.params=x\ y
comment29.target=java.awt.Color\ getPixel(int,\ int)
comment29.text=\n\ Returns\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ as\ a\ Color\ object.\n\ If\ nothing\ has\ been\ explicitly\ drawn\ on\ this\ particular\ pixel,\ the\ panel's\n\ background\ color\ is\ returned.\n
comment3.params=rgb
comment3.target=int\ getGreen(int)
comment3.text=\n\ Returns\ the\ green\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\n
comment30.params=x\ y
comment30.target=int\ getPixelRGB(int,\ int)
comment30.text=\n\ Returns\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ as\ an\ RGB\ integer.\n\ The\ individual\ red,\ green,\ and\ blue\ components\ of\ the\ RGB\ integer\ can\ be\n\ extracted\ from\ this\ by\ calling\ DrawingPanel.getRed,\ getGreen,\ and\ getBlue.\n\ If\ nothing\ has\ been\ explicitly\ drawn\ on\ this\ particular\ pixel,\ the\ panel's\n\ background\ color\ is\ returned.\n\ See\ also\:\ getPixel.\n
comment31.params=
comment31.target=java.awt.Color[][]\ getPixels()
comment31.text=\n\ Returns\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ as\ a\ 2-D\ array\n\ of\ Color\ objects.\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\n
comment32.params=
comment32.target=int[][]\ getPixelsRGB()
comment32.text=\n\ Returns\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ as\ a\ 2-D\ array\n\ of\ RGB\ integers.\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\n\ The\ individual\ red,\ green,\ and\ blue\ components\ of\ each\ RGB\ integer\ can\ be\n\ extracted\ from\ this\ by\ calling\ DrawingPanel.getRed,\ getGreen,\ and\ getBlue.\n
comment33.params=
comment33.target=java.awt.Dimension\ getSize()
comment33.text=\n\ Returns\ the\ drawing\ panel's\ pixel\ size\ (width,\ height)\ as\ a\ Dimension\ object.\n
comment34.params=
comment34.target=int\ getWidth()
comment34.text=\n\ Returns\ the\ drawing\ panel's\ width\ in\ pixels.\n
comment35.params=
comment35.target=int\ getZoom()
comment35.text=\n\ Returns\ the\ drawing\ panel's\ current\ zoom\ factor.\n\ Initially\ this\ is\ 1\ to\ indicate\ 100%\ zoom,\ the\ original\ size.\n
comment36.params=img\ infoflags\ x\ y\ width\ height
comment36.target=boolean\ imageUpdate(java.awt.Image,\ int,\ int,\ int,\ int,\ int)
comment36.text=\n\ Required\ method\ of\ ImageObserver\ interface.\n\ Notifies\ the\ panel\ when\ images\ are\ loaded\ and\ updated.\n
comment37.params=
comment37.target=void\ initializeAnimation()
comment37.text=\n\ Sets\ up\ state\ for\ drawing\ and\ saving\ frames\ of\ animation\ to\ a\ GIF\ image.\n
comment38.params=
comment38.target=boolean\ isAnimated()
comment38.text=\n\ Returns\ whether\ this\ drawing\ panel\ is\ in\ animation\ mode.\n
comment39.params=
comment39.target=boolean\ isGraphical()
comment39.text=\n\ Returns\ whether\ this\ drawing\ panel\ is\ going\ to\ be\ displayed\ on\ screen.\n\ This\ is\ almost\ always\ true\ except\ in\ some\ server\ environments\ where\n\ the\ DrawingPanel\ is\ run\ 'headless'\ without\ a\ GUI,\ often\ for\ scripting\n\ and\ automation\ purposes.\n
comment4.params=rgb
comment4.target=int\ getBlue(int)
comment4.text=\n\ Returns\ the\ blue\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\n
comment40.params=
comment40.target=boolean\ isMultiple()
comment40.text=\n\ Returns\ true\ if\ the\ drawing\ panel\ class\ is\ in\ multiple\ mode.\n\ This\ would\ be\ true\ if\ the\ current\ program\ pops\ up\ several\ drawing\ panels\n\ and\ we\ want\ to\ save\ the\ state\ of\ each\ of\ them\ to\ a\ different\ file.\n
comment41.params=filename
comment41.target=java.awt.Image\ loadImage(java.lang.String)
comment41.text=\n\ Loads\ an\ image\ from\ the\ given\ file\ on\ disk\ and\ returns\ it\n\ as\ an\ Image\ object.\n\ Throws\ a\ RuntimeException\ if\ the\ given\ file\ is\ not\ found.\n
comment42.params=
comment42.target=boolean\ readyToClose()
comment42.text=\n\ Returns\ whether\ the\ drawing\ panel\ should\ be\ closed\ and\ the\ program\n\ should\ be\ shut\ down.\n
comment43.params=image\ oldColor\ newColor
comment43.target=void\ replaceColor(java.awt.image.BufferedImage,\ java.awt.Color,\ java.awt.Color)
comment43.text=\n\ Replaces\ all\ occurrences\ of\ the\ given\ old\ color\ with\ the\ given\ new\ color.\n
comment44.params=filename
comment44.target=void\ save(java.lang.String)
comment44.text=\n\ Takes\ the\ current\ contents\ of\ the\ drawing\ panel\ and\ writes\ them\ to\n\ the\ given\ file.\n
comment45.params=filename
comment45.target=void\ saveAnimated(java.lang.String)
comment45.text=\n\ Takes\ the\ current\ contents\ of\ the\ drawing\ panel\ and\ writes\ them\ to\n\ the\ given\ file.\n
comment46.params=
comment46.target=void\ saveAs()
comment46.text=\n\ Called\ when\ the\ user\ presses\ the\ "Save\ As"\ menu\ item.\n\ Pops\ up\ a\ file\ chooser\ prompting\ the\ user\ to\ save\ their\ panel\ to\ an\ image.\n
comment47.params=
comment47.target=void\ saveAsAnimated()
comment47.text=\n\ Called\ when\ the\ user\ presses\ the\ "Save\ As"\ menu\ item\ on\ an\ animated\ panel.\n\ Pops\ up\ a\ file\ chooser\ prompting\ the\ user\ to\ save\ their\ panel\ to\ an\ image.\n
comment48.params=extension
comment48.target=java.lang.String\ saveAsHelper(java.lang.String)
comment48.text=\n\ A\ helper\ method\ to\ facilitate\ the\ Save\ As\ action\ for\ both\ animated\n\ and\ non-animated\ images.\n
comment49.params=
comment49.target=java.lang.String\ saveToTempFile()
comment49.text=\n\ Saves\ the\ drawing\ panel's\ image\ to\ a\ temporary\ file\ and\ returns\n\ that\ file's\ name.\n
comment5.params=rgb
comment5.target=int\ getAlpha(int)
comment5.text=\n\ Returns\ the\ alpha\ (opacity)\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\n
comment50.params=c
comment50.target=void\ setBackground(java.awt.Color)
comment50.text=\n\ Sets\ the\ background\ color\ of\ the\ drawing\ panel\ to\ be\ the\ given\ color.\n
comment51.params=rgb
comment51.target=void\ setBackground(int)
comment51.text=\n\ Sets\ the\ background\ color\ of\ the\ drawing\ panel\ to\ be\ the\ color\n\ represented\ by\ the\ given\ RGB\ integer.\n
comment52.params=gridLines
comment52.target=void\ setGridLines(boolean)
comment52.text=\n\ Enables\ or\ disables\ the\ drawing\ of\ grid\ lines\ on\ top\ of\ the\ image\ to\ help\n\ with\ debugging\ sizes\ and\ coordinates.\n
comment53.params=height
comment53.target=void\ setHeight(int)
comment53.text=\n\ Sets\ the\ drawing\ panel's\ height\ in\ pixels\ to\ the\ given\ value.\n\ After\ calling\ this\ method,\ the\ client\ must\ call\ getGraphics()\ again\n\ to\ get\ the\ new\ graphics\ context\ of\ the\ newly\ enlarged\ image\ buffer.\n
comment54.params=x\ y\ color
comment54.target=void\ setPixel(int,\ int,\ java.awt.Color)
comment54.text=\n\ Sets\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ to\ be\ the\ given\ color.\n\ If\ the\ color\ is\ null,\ the\ call\ has\ no\ effect.\n
comment55.params=x\ y\ rgb
comment55.target=void\ setPixelRGB(int,\ int,\ int)
comment55.text=\n\ Sets\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ to\ be\ the\ color\n\ represented\ by\ the\ given\ RGB\ integer.\n\ See\ also\:\ setPixel.\n
comment56.params=pixels
comment56.target=void\ setPixels(java.awt.Color[][])
comment56.text=\n\ Sets\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ to\ the\ colors\n\ in\ the\ given\ 2-D\ array\ of\ Color\ objects.\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\n\ If\ the\ given\ array's\ dimensions\ do\ not\ match\ the\ width/height\ of\ the\n\ drawing\ panel,\ the\ panel\ is\ resized\ to\ match\ the\ array.\n\ If\ the\ pixel\ array\ is\ null\ or\ size\ 0,\ the\ call\ has\ no\ effect.\n\ If\ any\ rows\ or\ colors\ in\ the\ array\ are\ null,\ those\ pixels\ will\ be\ ignored.\n\ The\ 2-D\ array\ passed\ is\ assumed\ to\ be\ rectangular\ in\ length\ (not\ jagged).\n
comment57.params=pixels
comment57.target=void\ setPixelsRGB(int[][])
comment57.text=\n\ Sets\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ to\ the\ colors\n\ represented\ by\ the\ given\ 2-D\ array\ of\ RGB\ integers.\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\n\ If\ the\ given\ array's\ dimensions\ do\ not\ match\ the\ width/height\ of\ the\n\ drawing\ panel,\ the\ panel\ is\ resized\ to\ match\ the\ array.\n\ If\ the\ pixel\ array\ is\ null\ or\ size\ 0,\ the\ call\ has\ no\ effect.\n\ The\ 2-D\ array\ passed\ is\ assumed\ to\ be\ rectangular\ in\ length\ (not\ jagged).\n
comment58.params=width\ height
comment58.target=void\ setSize(int,\ int)
comment58.text=\n\ Sets\ the\ drawing\ panel's\ pixel\ size\ (width,\ height)\ to\ the\ given\ values.\n\ After\ calling\ this\ method,\ the\ client\ must\ call\ getGraphics()\ again\n\ to\ get\ the\ new\ graphics\ context\ of\ the\ newly\ enlarged\ image\ buffer.\n
comment59.params=text
comment59.target=void\ setStatusBarText(java.lang.String)
comment59.text=\n\ Sets\ the\ text\ that\ will\ appear\ in\ the\ drawing\ panel's\ bottom\ status\ bar.\n
comment6.params=name
comment6.target=boolean\ hasProperty(java.lang.String)
comment6.text=\n\ Returns\ whether\ the\ given\ Java\ system\ property\ has\ been\ set.\n
comment60.params=
comment60.target=void\ setupMenuBar()
comment60.text=\n\ Initializes\ the\ drawing\ panel's\ menu\ bar\ items.\n
comment61.params=visible
comment61.target=void\ setVisible(boolean)
comment61.text=\n\ Show\ or\ hide\ the\ drawing\ panel\ on\ the\ screen.\n\ @param\ visible\ true\ to\ show,\ false\ to\ hide\n
comment62.params=width
comment62.target=void\ setWidth(int)
comment62.text=\n\ Sets\ the\ drawing\ panel's\ width\ in\ pixels\ to\ the\ given\ value.\n\ After\ calling\ this\ method,\ the\ client\ must\ call\ getGraphics()\ again\n\ to\ get\ the\ new\ graphics\ context\ of\ the\ newly\ enlarged\ image\ buffer.\n
comment63.params=
comment63.target=boolean\ shouldDiff()
comment63.text=\n\ Returns\ whether\ the\ user\ wants\ to\ perform\ a\ 'diff'\ comparison\ of\ their\n\ drawing\ panel\ with\ a\ given\ expected\ output\ image.\n
comment64.params=
comment64.target=boolean\ shouldSave()
comment64.text=\n\ Returns\ whether\ the\ user\ wants\ to\ save\ the\ drawing\ panel\ contents\ to\n\ a\ file\ automatically.\n
comment65.params=parent\ title\ message\ names
comment65.target=int\ showOptionDialog(java.awt.Frame,\ java.lang.String,\ java.lang.String,\ java.lang.String[])
comment65.text=\n\ Shows\ a\ dialog\ box\ with\ the\ given\ choices;\n\ returns\ the\ index\ chosen\ (-1\ \=\=\ canceled).\n
comment66.params=e
comment66.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment67.params=e
comment67.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment68.params=millis
comment68.target=void\ sleep(int)
comment68.text=\n\ Causes\ the\ program\ to\ pause\ for\ the\ given\ amount\ of\ time\ in\ milliseconds.\n\ This\ allows\ for\ animation\ by\ calling\ pause\ in\ a\ loop.\n
comment69.params=
comment69.target=void\ toFront()
comment69.text=\n\ Moves\ the\ drawing\ panel\ window\ on\ top\ of\ other\ windows\ so\ it\ can\ be\ seen.\n
comment7.params=
comment7.target=boolean\ mainIsActive()
comment7.text=\n\ Returns\ whether\ the\ 'main'\ thread\ is\ still\ running.\n\ Used\ to\ determine\ whether\ to\ exit\ the\ program\ when\ the\ drawing\ panel\n\ is\ closed\ by\ the\ user.\n
comment70.params=window
comment70.target=void\ toFront(java.awt.Window)
comment70.text=\n\ Brings\ the\ given\ window\ to\ the\ front\ of\ the\ Z-ordering.\n
comment71.params=
comment71.target=void\ run()
comment72.params=zoomFactor
comment72.target=void\ zoom(int)
comment72.text=\n\ Zooms\ the\ drawing\ panel\ in/out\ to\ the\ given\ factor.\n\ A\ zoom\ factor\ of\ 1,\ the\ default,\ indicates\ normal\ size.\n\ The\ factor\ value\ passed\ should\ be\ >\=\ 1;\ if\ not,\ 1\ will\ be\ used.\n
comment73.params=e
comment73.target=void\ onClick(DrawingPanel.DPMouseEventHandler)
comment74.params=e
comment74.target=void\ onDrag(DrawingPanel.DPMouseEventHandler)
comment75.params=e
comment75.target=void\ onKeyDown(DrawingPanel.DPKeyEventHandler)
comment76.params=e
comment76.target=void\ onKeyUp(DrawingPanel.DPKeyEventHandler)
comment77.params=e
comment77.target=void\ onMouseEnter(DrawingPanel.DPMouseEventHandler)
comment78.params=e
comment78.target=void\ onMouseExit(DrawingPanel.DPMouseEventHandler)
comment79.params=e
comment79.target=void\ onMove(DrawingPanel.DPMouseEventHandler)
comment8.params=name
comment8.target=boolean\ propertyIsTrue(java.lang.String)
comment8.text=\n\ Returns\ whether\ the\ given\ Java\ system\ property\ has\ been\ set\ to\ a\n\ "truthy"\ value\ such\ as\ "yes"\ or\ "true"\ or\ "1".\ \n
comment80.params=e
comment80.target=void\ onMouseDown(DrawingPanel.DPMouseEventHandler)
comment81.params=e
comment81.target=void\ onMouseUp(DrawingPanel.DPMouseEventHandler)
comment82.params=s\ os
comment82.target=void\ putAscii(java.lang.String,\ java.io.OutputStream)
comment82.text=\n\ Write\ just\ the\ low\ bytes\ of\ a\ String.\ (This\ sucks,\ but\ the\ concept\ of\ an\n\ encoding\ seems\ inapplicable\ to\ a\ binary\ file\ ID\ string.\ I\ would\ think\n\ flexibility\ is\ just\ what\ we\ don't\ want\ -\ but\ then\ again,\ maybe\ I'm\ slow.)\n
comment83.params=i16\ os
comment83.target=void\ putShort(int,\ java.io.OutputStream)
comment83.text=\n\ Write\ a\ 16-bit\ integer\ in\ little\ endian\ byte\ order.\n
comment9.params=r\ g\ b
comment9.target=int\ toRgbInteger(int,\ int,\ int)
comment9.text=\n\ Returns\ an\ RGB\ integer\ made\ from\ the\ given\ red,\ green,\ and\ blue\ components\n\ from\ 0-255.\ \ The\ returned\ integer\ is\ suitable\ for\ use\ with\ various\ RGB\n\ integer\ methods\ in\ this\ class\ such\ as\ setPixel.\n
numComments=84
